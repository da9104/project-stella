generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Message {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  
  userId    String?  
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  verificationToken    VerificationToken?  @relation(fields: [verificationTokenId], references: [token], name: "VerificationToken_Session")
  verificationTokenId  String?             // Foreign key to VerificationToken (optional)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([sessionToken], map: "sessionToken_idx")
  @@index([userId], map: "userId_idx")
}

model User {
  id        String       @id @default(uuid())
  name      String       @unique
  email     String?      @unique
  emailVerified DateTime?
  image     String? 
  username  String?      @unique
  password  String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  accounts  Account[]
  sessions  Session[]
  messages  Message[]   
}

model VerificationToken {
  identifier String
  token      String    @id @default(uuid()) @unique
  expires    DateTime
  sessions   Session[] @relation(name: "VerificationToken_Session")

  @@unique([identifier, token])
}